{"ast":null,"code":"var _jsxFileName = \"/Users/toddalexander/Desktop/portara-website/pages/users/[id].tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { sampleUserData } from '../../utils/sample-data';\nimport Layout from '../../components/Layout';\nimport ListDetail from '../../components/ListDetail';\nexport default class StaticPropsDetail extends React.Component {\n  render() {\n    const {\n      item,\n      errors\n    } = this.props;\n\n    if (errors) {\n      return __jsx(Layout, {\n        title: `Error | Next.js + TypeScript Example`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }, __jsx(\"span\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      }, \"Error:\"), \" \", errors));\n    }\n\n    return __jsx(Layout, {\n      title: `${item ? item.name : 'User Detail'} | Next.js + TypeScript Example`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, item && __jsx(ListDetail, {\n      item: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 18\n      }\n    }));\n  }\n\n}\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map(user => ({\n    params: {\n      id: user.id.toString()\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const id = params === null || params === void 0 ? void 0 : params.id;\n    const item = sampleUserData.find(data => data.id === Number(id)); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return {\n      props: {\n        item\n      }\n    };\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/Users/toddalexander/Desktop/portara-website/pages/users/[id].tsx"],"names":["React","sampleUserData","Layout","ListDetail","StaticPropsDetail","Component","render","item","errors","props","color","name","getStaticPaths","paths","map","user","params","id","toString","fallback","getStaticProps","find","data","Number","err","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAOA,eAAe,MAAMC,iBAAN,SAAgCJ,KAAK,CAACK,SAAtC,CAAuD;AACpEC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmB,KAAKC,KAA9B;;AAEA,QAAID,MAAJ,EAAY;AACV,aACE,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAG,sCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,KAAK,EAAE;AAAEE,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,OACgDF,MADhD,CADF,CADF;AAOD;;AAED,WACE,MAAC,MAAD;AACE,MAAA,KAAK,EAAG,GACND,IAAI,GAAGA,IAAI,CAACI,IAAR,GAAe,aACpB,iCAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGJ,IAAI,IAAI,MAAC,UAAD;AAAY,MAAA,IAAI,EAAEA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALX,CADF;AASD;;AAvBmE;AA0BtE,OAAO,MAAMK,cAA8B,GAAG,YAAY;AACxD;AACA,QAAMC,KAAK,GAAGZ,cAAc,CAACa,GAAf,CAAmBC,IAAI,KAAK;AACxCC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AAAN;AADgC,GAAL,CAAvB,CAAd,CAFwD,CAMxD;AACA;;AACA,SAAO;AAAEL,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CATM,C,CAWP;AACA;AACA;;AACA,OAAO,MAAMC,cAA8B,GAAG,OAAO;AAAEJ,EAAAA;AAAF,CAAP,KAAsB;AAClE,MAAI;AACF,UAAMC,EAAE,GAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEC,EAAnB;AACA,UAAMV,IAAI,GAAGN,cAAc,CAACoB,IAAf,CAAoBC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYM,MAAM,CAACN,EAAD,CAA9C,CAAb,CAFE,CAGF;AACA;;AACA,WAAO;AAAER,MAAAA,KAAK,EAAE;AAAEF,QAAAA;AAAF;AAAT,KAAP;AACD,GAND,CAME,OAAOiB,GAAP,EAAY;AACZ,WAAO;AAAEf,MAAAA,KAAK,EAAE;AAAED,QAAAA,MAAM,EAAEgB,GAAG,CAACC;AAAd;AAAT,KAAP;AACD;AACF,CAVM","sourcesContent":["import React from 'react'\nimport { GetStaticProps, GetStaticPaths } from 'next'\n\nimport { User } from '../../interfaces'\nimport { sampleUserData } from '../../utils/sample-data'\nimport Layout from '../../components/Layout'\nimport ListDetail from '../../components/ListDetail'\n\ntype Props = {\n  item?: User\n  errors?: string\n}\n\nexport default class StaticPropsDetail extends React.Component<Props> {\n  render() {\n    const { item, errors } = this.props\n\n    if (errors) {\n      return (\n        <Layout title={`Error | Next.js + TypeScript Example`}>\n          <p>\n            <span style={{ color: 'red' }}>Error:</span> {errors}\n          </p>\n        </Layout>\n      )\n    }\n\n    return (\n      <Layout\n        title={`${\n          item ? item.name : 'User Detail'\n        } | Next.js + TypeScript Example`}\n      >\n        {item && <ListDetail item={item} />}\n      </Layout>\n    )\n  }\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map(user => ({\n    params: { id: user.id.toString() },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id\n    const item = sampleUserData.find(data => data.id === Number(id))\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { item } }\n  } catch (err) {\n    return { props: { errors: err.message } }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}