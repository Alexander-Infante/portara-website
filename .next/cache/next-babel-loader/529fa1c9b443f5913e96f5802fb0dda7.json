{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DECREMENT, INCREMENT, TICK, RESET } from '../actions/exampleActions';\nexport const initialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0\n};\n\nconst exampleReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TICK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lastUpdate: action.lastUpdate,\n        light: !!action.light\n      });\n\n    case INCREMENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case DECREMENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - 1\n      });\n\n    case RESET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: initialState.count\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default exampleReducer;","map":null,"metadata":{},"sourceType":"module"}